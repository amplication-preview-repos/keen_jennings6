/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  FlightBooking as PrismaFlightBooking,
  Customer as PrismaCustomer,
} from "@prisma/client";

export class FlightBookingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FlightBookingCountArgs, "select">
  ): Promise<number> {
    return this.prisma.flightBooking.count(args);
  }

  async flightBookings<T extends Prisma.FlightBookingFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.FlightBookingFindManyArgs>
  ): Promise<PrismaFlightBooking[]> {
    return this.prisma.flightBooking.findMany<Prisma.FlightBookingFindManyArgs>(
      args
    );
  }
  async flightBooking<T extends Prisma.FlightBookingFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.FlightBookingFindUniqueArgs>
  ): Promise<PrismaFlightBooking | null> {
    return this.prisma.flightBooking.findUnique(args);
  }
  async createFlightBooking<T extends Prisma.FlightBookingCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FlightBookingCreateArgs>
  ): Promise<PrismaFlightBooking> {
    return this.prisma.flightBooking.create<T>(args);
  }
  async updateFlightBooking<T extends Prisma.FlightBookingUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FlightBookingUpdateArgs>
  ): Promise<PrismaFlightBooking> {
    return this.prisma.flightBooking.update<T>(args);
  }
  async deleteFlightBooking<T extends Prisma.FlightBookingDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.FlightBookingDeleteArgs>
  ): Promise<PrismaFlightBooking> {
    return this.prisma.flightBooking.delete(args);
  }

  async getCustomer(parentId: string): Promise<PrismaCustomer | null> {
    return this.prisma.flightBooking
      .findUnique({
        where: { id: parentId },
      })
      .customer();
  }
}
