/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { FlightBooking } from "./FlightBooking";
import { FlightBookingCountArgs } from "./FlightBookingCountArgs";
import { FlightBookingFindManyArgs } from "./FlightBookingFindManyArgs";
import { FlightBookingFindUniqueArgs } from "./FlightBookingFindUniqueArgs";
import { CreateFlightBookingArgs } from "./CreateFlightBookingArgs";
import { UpdateFlightBookingArgs } from "./UpdateFlightBookingArgs";
import { DeleteFlightBookingArgs } from "./DeleteFlightBookingArgs";
import { Customer } from "../../customer/base/Customer";
import { FlightBookingService } from "../flightBooking.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => FlightBooking)
export class FlightBookingResolverBase {
  constructor(
    protected readonly service: FlightBookingService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "FlightBooking",
    action: "read",
    possession: "any",
  })
  async _flightBookingsMeta(
    @graphql.Args() args: FlightBookingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [FlightBooking])
  @nestAccessControl.UseRoles({
    resource: "FlightBooking",
    action: "read",
    possession: "any",
  })
  async flightBookings(
    @graphql.Args() args: FlightBookingFindManyArgs
  ): Promise<FlightBooking[]> {
    return this.service.flightBookings(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => FlightBooking, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "FlightBooking",
    action: "read",
    possession: "own",
  })
  async flightBooking(
    @graphql.Args() args: FlightBookingFindUniqueArgs
  ): Promise<FlightBooking | null> {
    const result = await this.service.flightBooking(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FlightBooking)
  @nestAccessControl.UseRoles({
    resource: "FlightBooking",
    action: "create",
    possession: "any",
  })
  async createFlightBooking(
    @graphql.Args() args: CreateFlightBookingArgs
  ): Promise<FlightBooking> {
    return await this.service.createFlightBooking({
      ...args,
      data: {
        ...args.data,

        customer: args.data.customer
          ? {
              connect: args.data.customer,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FlightBooking)
  @nestAccessControl.UseRoles({
    resource: "FlightBooking",
    action: "update",
    possession: "any",
  })
  async updateFlightBooking(
    @graphql.Args() args: UpdateFlightBookingArgs
  ): Promise<FlightBooking | null> {
    try {
      return await this.service.updateFlightBooking({
        ...args,
        data: {
          ...args.data,

          customer: args.data.customer
            ? {
                connect: args.data.customer,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FlightBooking)
  @nestAccessControl.UseRoles({
    resource: "FlightBooking",
    action: "delete",
    possession: "any",
  })
  async deleteFlightBooking(
    @graphql.Args() args: DeleteFlightBookingArgs
  ): Promise<FlightBooking | null> {
    try {
      return await this.service.deleteFlightBooking(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Customer, {
    nullable: true,
    name: "customer",
  })
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "read",
    possession: "any",
  })
  async getCustomer(
    @graphql.Parent() parent: FlightBooking
  ): Promise<Customer | null> {
    const result = await this.service.getCustomer(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
