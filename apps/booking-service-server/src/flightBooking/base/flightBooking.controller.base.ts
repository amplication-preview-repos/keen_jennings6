/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { FlightBookingService } from "../flightBooking.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { FlightBookingCreateInput } from "./FlightBookingCreateInput";
import { FlightBooking } from "./FlightBooking";
import { FlightBookingFindManyArgs } from "./FlightBookingFindManyArgs";
import { FlightBookingWhereUniqueInput } from "./FlightBookingWhereUniqueInput";
import { FlightBookingUpdateInput } from "./FlightBookingUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class FlightBookingControllerBase {
  constructor(
    protected readonly service: FlightBookingService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FlightBooking })
  @nestAccessControl.UseRoles({
    resource: "FlightBooking",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createFlightBooking(
    @common.Body() data: FlightBookingCreateInput
  ): Promise<FlightBooking> {
    return await this.service.createFlightBooking({
      data: {
        ...data,

        customer: data.customer
          ? {
              connect: data.customer,
            }
          : undefined,
      },
      select: {
        arrivalDate: true,
        createdAt: true,

        customer: {
          select: {
            id: true,
          },
        },

        departureDate: true,
        flightNumber: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [FlightBooking] })
  @ApiNestedQuery(FlightBookingFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "FlightBooking",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async flightBookings(
    @common.Req() request: Request
  ): Promise<FlightBooking[]> {
    const args = plainToClass(FlightBookingFindManyArgs, request.query);
    return this.service.flightBookings({
      ...args,
      select: {
        arrivalDate: true,
        createdAt: true,

        customer: {
          select: {
            id: true,
          },
        },

        departureDate: true,
        flightNumber: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FlightBooking })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "FlightBooking",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async flightBooking(
    @common.Param() params: FlightBookingWhereUniqueInput
  ): Promise<FlightBooking | null> {
    const result = await this.service.flightBooking({
      where: params,
      select: {
        arrivalDate: true,
        createdAt: true,

        customer: {
          select: {
            id: true,
          },
        },

        departureDate: true,
        flightNumber: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FlightBooking })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "FlightBooking",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateFlightBooking(
    @common.Param() params: FlightBookingWhereUniqueInput,
    @common.Body() data: FlightBookingUpdateInput
  ): Promise<FlightBooking | null> {
    try {
      return await this.service.updateFlightBooking({
        where: params,
        data: {
          ...data,

          customer: data.customer
            ? {
                connect: data.customer,
              }
            : undefined,
        },
        select: {
          arrivalDate: true,
          createdAt: true,

          customer: {
            select: {
              id: true,
            },
          },

          departureDate: true,
          flightNumber: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FlightBooking })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "FlightBooking",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteFlightBooking(
    @common.Param() params: FlightBookingWhereUniqueInput
  ): Promise<FlightBooking | null> {
    try {
      return await this.service.deleteFlightBooking({
        where: params,
        select: {
          arrivalDate: true,
          createdAt: true,

          customer: {
            select: {
              id: true,
            },
          },

          departureDate: true,
          flightNumber: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
