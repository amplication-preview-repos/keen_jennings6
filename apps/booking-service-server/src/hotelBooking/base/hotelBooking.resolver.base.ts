/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { HotelBooking } from "./HotelBooking";
import { HotelBookingCountArgs } from "./HotelBookingCountArgs";
import { HotelBookingFindManyArgs } from "./HotelBookingFindManyArgs";
import { HotelBookingFindUniqueArgs } from "./HotelBookingFindUniqueArgs";
import { CreateHotelBookingArgs } from "./CreateHotelBookingArgs";
import { UpdateHotelBookingArgs } from "./UpdateHotelBookingArgs";
import { DeleteHotelBookingArgs } from "./DeleteHotelBookingArgs";
import { Customer } from "../../customer/base/Customer";
import { HotelBookingService } from "../hotelBooking.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => HotelBooking)
export class HotelBookingResolverBase {
  constructor(
    protected readonly service: HotelBookingService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "HotelBooking",
    action: "read",
    possession: "any",
  })
  async _hotelBookingsMeta(
    @graphql.Args() args: HotelBookingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [HotelBooking])
  @nestAccessControl.UseRoles({
    resource: "HotelBooking",
    action: "read",
    possession: "any",
  })
  async hotelBookings(
    @graphql.Args() args: HotelBookingFindManyArgs
  ): Promise<HotelBooking[]> {
    return this.service.hotelBookings(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => HotelBooking, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "HotelBooking",
    action: "read",
    possession: "own",
  })
  async hotelBooking(
    @graphql.Args() args: HotelBookingFindUniqueArgs
  ): Promise<HotelBooking | null> {
    const result = await this.service.hotelBooking(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => HotelBooking)
  @nestAccessControl.UseRoles({
    resource: "HotelBooking",
    action: "create",
    possession: "any",
  })
  async createHotelBooking(
    @graphql.Args() args: CreateHotelBookingArgs
  ): Promise<HotelBooking> {
    return await this.service.createHotelBooking({
      ...args,
      data: {
        ...args.data,

        customer: args.data.customer
          ? {
              connect: args.data.customer,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => HotelBooking)
  @nestAccessControl.UseRoles({
    resource: "HotelBooking",
    action: "update",
    possession: "any",
  })
  async updateHotelBooking(
    @graphql.Args() args: UpdateHotelBookingArgs
  ): Promise<HotelBooking | null> {
    try {
      return await this.service.updateHotelBooking({
        ...args,
        data: {
          ...args.data,

          customer: args.data.customer
            ? {
                connect: args.data.customer,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => HotelBooking)
  @nestAccessControl.UseRoles({
    resource: "HotelBooking",
    action: "delete",
    possession: "any",
  })
  async deleteHotelBooking(
    @graphql.Args() args: DeleteHotelBookingArgs
  ): Promise<HotelBooking | null> {
    try {
      return await this.service.deleteHotelBooking(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Customer, {
    nullable: true,
    name: "customer",
  })
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "read",
    possession: "any",
  })
  async getCustomer(
    @graphql.Parent() parent: HotelBooking
  ): Promise<Customer | null> {
    const result = await this.service.getCustomer(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
