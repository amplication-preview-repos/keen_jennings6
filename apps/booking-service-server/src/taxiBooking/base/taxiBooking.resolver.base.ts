/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { TaxiBooking } from "./TaxiBooking";
import { TaxiBookingCountArgs } from "./TaxiBookingCountArgs";
import { TaxiBookingFindManyArgs } from "./TaxiBookingFindManyArgs";
import { TaxiBookingFindUniqueArgs } from "./TaxiBookingFindUniqueArgs";
import { CreateTaxiBookingArgs } from "./CreateTaxiBookingArgs";
import { UpdateTaxiBookingArgs } from "./UpdateTaxiBookingArgs";
import { DeleteTaxiBookingArgs } from "./DeleteTaxiBookingArgs";
import { Customer } from "../../customer/base/Customer";
import { TaxiBookingService } from "../taxiBooking.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => TaxiBooking)
export class TaxiBookingResolverBase {
  constructor(
    protected readonly service: TaxiBookingService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "TaxiBooking",
    action: "read",
    possession: "any",
  })
  async _taxiBookingsMeta(
    @graphql.Args() args: TaxiBookingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [TaxiBooking])
  @nestAccessControl.UseRoles({
    resource: "TaxiBooking",
    action: "read",
    possession: "any",
  })
  async taxiBookings(
    @graphql.Args() args: TaxiBookingFindManyArgs
  ): Promise<TaxiBooking[]> {
    return this.service.taxiBookings(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => TaxiBooking, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "TaxiBooking",
    action: "read",
    possession: "own",
  })
  async taxiBooking(
    @graphql.Args() args: TaxiBookingFindUniqueArgs
  ): Promise<TaxiBooking | null> {
    const result = await this.service.taxiBooking(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TaxiBooking)
  @nestAccessControl.UseRoles({
    resource: "TaxiBooking",
    action: "create",
    possession: "any",
  })
  async createTaxiBooking(
    @graphql.Args() args: CreateTaxiBookingArgs
  ): Promise<TaxiBooking> {
    return await this.service.createTaxiBooking({
      ...args,
      data: {
        ...args.data,

        customer: args.data.customer
          ? {
              connect: args.data.customer,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TaxiBooking)
  @nestAccessControl.UseRoles({
    resource: "TaxiBooking",
    action: "update",
    possession: "any",
  })
  async updateTaxiBooking(
    @graphql.Args() args: UpdateTaxiBookingArgs
  ): Promise<TaxiBooking | null> {
    try {
      return await this.service.updateTaxiBooking({
        ...args,
        data: {
          ...args.data,

          customer: args.data.customer
            ? {
                connect: args.data.customer,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TaxiBooking)
  @nestAccessControl.UseRoles({
    resource: "TaxiBooking",
    action: "delete",
    possession: "any",
  })
  async deleteTaxiBooking(
    @graphql.Args() args: DeleteTaxiBookingArgs
  ): Promise<TaxiBooking | null> {
    try {
      return await this.service.deleteTaxiBooking(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Customer, {
    nullable: true,
    name: "customer",
  })
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "read",
    possession: "any",
  })
  async getCustomer(
    @graphql.Parent() parent: TaxiBooking
  ): Promise<Customer | null> {
    const result = await this.service.getCustomer(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
