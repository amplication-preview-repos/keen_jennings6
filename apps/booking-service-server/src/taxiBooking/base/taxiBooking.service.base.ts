/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  TaxiBooking as PrismaTaxiBooking,
  Customer as PrismaCustomer,
} from "@prisma/client";

export class TaxiBookingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TaxiBookingCountArgs, "select">
  ): Promise<number> {
    return this.prisma.taxiBooking.count(args);
  }

  async taxiBookings<T extends Prisma.TaxiBookingFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.TaxiBookingFindManyArgs>
  ): Promise<PrismaTaxiBooking[]> {
    return this.prisma.taxiBooking.findMany<Prisma.TaxiBookingFindManyArgs>(
      args
    );
  }
  async taxiBooking<T extends Prisma.TaxiBookingFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.TaxiBookingFindUniqueArgs>
  ): Promise<PrismaTaxiBooking | null> {
    return this.prisma.taxiBooking.findUnique(args);
  }
  async createTaxiBooking<T extends Prisma.TaxiBookingCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TaxiBookingCreateArgs>
  ): Promise<PrismaTaxiBooking> {
    return this.prisma.taxiBooking.create<T>(args);
  }
  async updateTaxiBooking<T extends Prisma.TaxiBookingUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TaxiBookingUpdateArgs>
  ): Promise<PrismaTaxiBooking> {
    return this.prisma.taxiBooking.update<T>(args);
  }
  async deleteTaxiBooking<T extends Prisma.TaxiBookingDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.TaxiBookingDeleteArgs>
  ): Promise<PrismaTaxiBooking> {
    return this.prisma.taxiBooking.delete(args);
  }

  async getCustomer(parentId: string): Promise<PrismaCustomer | null> {
    return this.prisma.taxiBooking
      .findUnique({
        where: { id: parentId },
      })
      .customer();
  }
}
