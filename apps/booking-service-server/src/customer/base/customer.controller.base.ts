/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { CustomerService } from "../customer.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { CustomerCreateInput } from "./CustomerCreateInput";
import { Customer } from "./Customer";
import { CustomerFindManyArgs } from "./CustomerFindManyArgs";
import { CustomerWhereUniqueInput } from "./CustomerWhereUniqueInput";
import { CustomerUpdateInput } from "./CustomerUpdateInput";
import { FlightBookingFindManyArgs } from "../../flightBooking/base/FlightBookingFindManyArgs";
import { FlightBooking } from "../../flightBooking/base/FlightBooking";
import { FlightBookingWhereUniqueInput } from "../../flightBooking/base/FlightBookingWhereUniqueInput";
import { HotelBookingFindManyArgs } from "../../hotelBooking/base/HotelBookingFindManyArgs";
import { HotelBooking } from "../../hotelBooking/base/HotelBooking";
import { HotelBookingWhereUniqueInput } from "../../hotelBooking/base/HotelBookingWhereUniqueInput";
import { TaxiBookingFindManyArgs } from "../../taxiBooking/base/TaxiBookingFindManyArgs";
import { TaxiBooking } from "../../taxiBooking/base/TaxiBooking";
import { TaxiBookingWhereUniqueInput } from "../../taxiBooking/base/TaxiBookingWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class CustomerControllerBase {
  constructor(
    protected readonly service: CustomerService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Customer })
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createCustomer(
    @common.Body() data: CustomerCreateInput
  ): Promise<Customer> {
    return await this.service.createCustomer({
      data: data,
      select: {
        createdAt: true,
        email: true,
        id: true,
        name: true,
        phone: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Customer] })
  @ApiNestedQuery(CustomerFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async customers(@common.Req() request: Request): Promise<Customer[]> {
    const args = plainToClass(CustomerFindManyArgs, request.query);
    return this.service.customers({
      ...args,
      select: {
        createdAt: true,
        email: true,
        id: true,
        name: true,
        phone: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Customer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async customer(
    @common.Param() params: CustomerWhereUniqueInput
  ): Promise<Customer | null> {
    const result = await this.service.customer({
      where: params,
      select: {
        createdAt: true,
        email: true,
        id: true,
        name: true,
        phone: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Customer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateCustomer(
    @common.Param() params: CustomerWhereUniqueInput,
    @common.Body() data: CustomerUpdateInput
  ): Promise<Customer | null> {
    try {
      return await this.service.updateCustomer({
        where: params,
        data: data,
        select: {
          createdAt: true,
          email: true,
          id: true,
          name: true,
          phone: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Customer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteCustomer(
    @common.Param() params: CustomerWhereUniqueInput
  ): Promise<Customer | null> {
    try {
      return await this.service.deleteCustomer({
        where: params,
        select: {
          createdAt: true,
          email: true,
          id: true,
          name: true,
          phone: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/flightBookings")
  @ApiNestedQuery(FlightBookingFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "FlightBooking",
    action: "read",
    possession: "any",
  })
  async findFlightBookings(
    @common.Req() request: Request,
    @common.Param() params: CustomerWhereUniqueInput
  ): Promise<FlightBooking[]> {
    const query = plainToClass(FlightBookingFindManyArgs, request.query);
    const results = await this.service.findFlightBookings(params.id, {
      ...query,
      select: {
        arrivalDate: true,
        createdAt: true,

        customer: {
          select: {
            id: true,
          },
        },

        departureDate: true,
        flightNumber: true,
        id: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/flightBookings")
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "update",
    possession: "any",
  })
  async connectFlightBookings(
    @common.Param() params: CustomerWhereUniqueInput,
    @common.Body() body: FlightBookingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      flightBookings: {
        connect: body,
      },
    };
    await this.service.updateCustomer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/flightBookings")
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "update",
    possession: "any",
  })
  async updateFlightBookings(
    @common.Param() params: CustomerWhereUniqueInput,
    @common.Body() body: FlightBookingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      flightBookings: {
        set: body,
      },
    };
    await this.service.updateCustomer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/flightBookings")
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "update",
    possession: "any",
  })
  async disconnectFlightBookings(
    @common.Param() params: CustomerWhereUniqueInput,
    @common.Body() body: FlightBookingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      flightBookings: {
        disconnect: body,
      },
    };
    await this.service.updateCustomer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/hotelBookings")
  @ApiNestedQuery(HotelBookingFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "HotelBooking",
    action: "read",
    possession: "any",
  })
  async findHotelBookings(
    @common.Req() request: Request,
    @common.Param() params: CustomerWhereUniqueInput
  ): Promise<HotelBooking[]> {
    const query = plainToClass(HotelBookingFindManyArgs, request.query);
    const results = await this.service.findHotelBookings(params.id, {
      ...query,
      select: {
        checkInDate: true,
        checkOutDate: true,
        createdAt: true,

        customer: {
          select: {
            id: true,
          },
        },

        id: true,
        roomType: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/hotelBookings")
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "update",
    possession: "any",
  })
  async connectHotelBookings(
    @common.Param() params: CustomerWhereUniqueInput,
    @common.Body() body: HotelBookingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      hotelBookings: {
        connect: body,
      },
    };
    await this.service.updateCustomer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/hotelBookings")
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "update",
    possession: "any",
  })
  async updateHotelBookings(
    @common.Param() params: CustomerWhereUniqueInput,
    @common.Body() body: HotelBookingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      hotelBookings: {
        set: body,
      },
    };
    await this.service.updateCustomer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/hotelBookings")
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "update",
    possession: "any",
  })
  async disconnectHotelBookings(
    @common.Param() params: CustomerWhereUniqueInput,
    @common.Body() body: HotelBookingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      hotelBookings: {
        disconnect: body,
      },
    };
    await this.service.updateCustomer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/taxiBookings")
  @ApiNestedQuery(TaxiBookingFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "TaxiBooking",
    action: "read",
    possession: "any",
  })
  async findTaxiBookings(
    @common.Req() request: Request,
    @common.Param() params: CustomerWhereUniqueInput
  ): Promise<TaxiBooking[]> {
    const query = plainToClass(TaxiBookingFindManyArgs, request.query);
    const results = await this.service.findTaxiBookings(params.id, {
      ...query,
      select: {
        createdAt: true,

        customer: {
          select: {
            id: true,
          },
        },

        dropoffLocation: true,
        id: true,
        pickupLocation: true,
        pickupTime: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/taxiBookings")
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "update",
    possession: "any",
  })
  async connectTaxiBookings(
    @common.Param() params: CustomerWhereUniqueInput,
    @common.Body() body: TaxiBookingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      taxiBookings: {
        connect: body,
      },
    };
    await this.service.updateCustomer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/taxiBookings")
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "update",
    possession: "any",
  })
  async updateTaxiBookings(
    @common.Param() params: CustomerWhereUniqueInput,
    @common.Body() body: TaxiBookingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      taxiBookings: {
        set: body,
      },
    };
    await this.service.updateCustomer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/taxiBookings")
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "update",
    possession: "any",
  })
  async disconnectTaxiBookings(
    @common.Param() params: CustomerWhereUniqueInput,
    @common.Body() body: TaxiBookingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      taxiBookings: {
        disconnect: body,
      },
    };
    await this.service.updateCustomer({
      where: params,
      data,
      select: { id: true },
    });
  }
}
